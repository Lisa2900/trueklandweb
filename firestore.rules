// firestore.rules - Reglas de seguridad para Firestore
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Usuarios - solo pueden leer/escribir sus propios datos
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Productos - lectura pública de productos autorizados, escritura solo del propietario
    match /UserPost/{postId} {
      allow read: if resource.data.isAuthorized == true;
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId &&
                   request.resource.data.isAuthorized == false; // Productos requieren moderación
    }
    
    // Categorías - solo lectura para usuarios autenticados
    match /Category/{categoryId} {
      allow read: if request.auth != null;
      allow write: if false; // Solo admins pueden modificar categorías
    }
    
    // Intercambios - solo participantes pueden ver/modificar
    match /exchanges/{exchangeId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
                   request.auth.uid in request.resource.data.participants;
    }
    
    // Mensajes de chat - solo participantes del intercambio
    match /chatMessages/{messageId} {
      allow read, write: if request.auth != null && 
                        (request.auth.uid == resource.data.senderId || 
                         request.auth.uid == resource.data.receiverId);
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.senderId;
    }
    
    // Notificaciones - solo el usuario puede ver sus notificaciones
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null; // Cualquier usuario puede crear notificaciones
    }
    
    // Reviews - lectura pública, escritura solo del autor
    match /reviews/{reviewId} {
      allow read: if true;
      allow write: if request.auth != null && 
                  request.auth.uid == resource.data.fromUserId;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.fromUserId;
    }
    
    // Funciones helper
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isValidProduct() {
      return request.resource.data.keys().hasAll([
        'title', 'desc', 'category', 'price', 'images', 'userId'
      ]) &&
      request.resource.data.title is string &&
      request.resource.data.title.size() >= 3 &&
      request.resource.data.desc is string &&
      request.resource.data.desc.size() >= 10 &&
      request.resource.data.images is list &&
      request.resource.data.images.size() >= 1 &&
      request.resource.data.images.size() <= 5;
    }
  }
}

// storage.rules - Reglas de seguridad para Storage
service firebase.storage {
  match /b/{bucket}/o {
    
    // Imágenes de productos - solo el propietario puede subir
    match /products/{userId}/{imageId} {
      allow read: if true; // Imágenes públicas
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Avatares de usuarios - solo el propietario
    match /avatars/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Validar que los archivos sean imágenes y no excedan 5MB
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 5 * 1024 * 1024;
    }
  }
}
